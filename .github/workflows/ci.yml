# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI

on:
  push:
    branches: [master, main]  # Added main branch as well
  pull_request:
    branches: [master, main]

jobs:
  test:
    runs-on: [linux, x64]
    strategy:
      matrix:
          python-version: ["3.9", "3.10", "3.11", "3.12"]
          include:
          # Default version
          - gymnasium-version: "1.0.0"
          # Add a new config to test gym<1.0
          - python-version: "3.10"
            gymnasium-version: "0.29.1"
            
    steps:
      - uses: actions/checkout@v4  # Updated to v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5  # Updated to v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
      - name: Install PyTorch CPU
        run: |
          pip install torch==2.3.1+cpu --index-url https://download.pytorch.org/whl/cpu
          
      - name: Install project dependencies
        run: |
          # Install your project in editable mode
          pip install -e .
          # Install additional dependencies for testing and docs
          pip install pytest pytest-cov ruff mypy sphinx opencv-python-headless
          
      - name: Install specific gymnasium version
        if: matrix.gymnasium-version != '1.0.0'
        run: |
          pip install gymnasium==${{ matrix.gymnasium-version }}
          pip install "numpy<2"
          pip install "ale-py==0.10.1"
          
      - name: Install ROS2 dependencies (if needed)
        run: |
          pip install rclpy geometry-msgs sensor-msgs std-msgs
          
      - name: Install RL dependencies
        run: |
          pip install stable-baselines3 gymnasium wandb
          
      - name: List installed packages
        run: |
          pip list
          
      - name: Lint with ruff
        run: |
          ruff check .
        continue-on-error: true  # Don't fail CI on linting errors initially
        
      - name: Type check with mypy
        run: |
          mypy --ignore-missing-imports drl_collision_avoidance/
        continue-on-error: true  # Don't fail CI on type errors initially
        
      - name: Test with pytest
        run: |
          pytest tests/ -v --tb=short
          
      - name: Test PPO training (quick smoke test)
        run: |
          python -c "
          from drl_collision_avoidance.ppo import RobotEnv
          from stable_baselines3 import PPO
          import tempfile
          import os
          
          # Quick smoke test - can we create env and model?
          env = RobotEnv()
          model = PPO('MlpPolicy', env, verbose=0)
          
          # Test very short training
          model.learn(total_timesteps=100)
          
          # Test save/load
          with tempfile.TemporaryDirectory() as tmp_dir:
              model_path = os.path.join(tmp_dir, 'test_model')
              model.save(model_path)
              loaded_model = PPO.load(model_path, env=env)
              
          print('âœ“ PPO training smoke test passed')
          "
          
      - name: Build documentation (if sphinx config exists)
        run: |
          if [ -f "docs/conf.py" ] || [ -f "doc/conf.py" ]; then
            sphinx-build -W -b html docs/ docs/_build/html/ || sphinx-build -W -b html doc/ doc/_build/html/
          else
            echo "No Sphinx documentation found, skipping..."
          fi
        continue-on-error: true